package ik.com.anup.recursion;

import java.util.ArrayList;

/*Given a string, return all strings that can be generated by changing case of one or more letters in it.

Example One
{
"s": "a1z"
}
Output:

["A1Z", "A1z", "a1Z", "a1z"]
Example Two
{
"s": "123"
}
Output:

["123"]
Notes
Return strings in any order.

Constraints:

Input string may contain only: 'a'..'z', 'A'..'Z', '0'..'9'
1 <= length of the string <= 12*/
public class LetterCasePermutation {



    static ArrayList<String> letter_case_permutations(String s) {
        // Write your code here.
  	ArrayList<String> result = new ArrayList<String>();
    helper(s, 0, new char[s.length()], result);
    return result;
}

public static void helper(String input, int indx, char[] slate, ArrayList<String> result )
{	// Base case
    if (indx == input.length()) {
        result.add(new String(slate));
        
    } //else {//Recursion
    	
        char ch = input.charAt(indx);
        if (Character.isLetter(ch)) {// two choices for alphabetes
        	// flip to Uppercase and move to next index and call recursive function	
            slate[indx] = Character.toUpperCase(ch);
            helper(input, indx+1, slate,result);

            // flip to lowercase and move to next index and call recursive function	
            slate[indx] = Character.toLowerCase(ch);
            helper(input, indx+1, slate, result);
        } else {
        	// chatAt is digit so no need to check for flip, just move to next index

        	//// If current character is not a letter, we leave it unchanged and make only one recursive call.
            slate[indx] = ch;
            helper(input, indx+1, slate, result);
        }
    //}
}
/*
Asymptotic complexity in terms of the length of the input string:
* Time complexity: O(length * 2^length)
* Auxiliary space: O(length).
* Total space: O(length * 2^length).
*/
}
/*
 * Space complexity with immutable parameters = O(n2) 
 * Space complexity with mutable parameters = O(n)
 *  So we will prefer mutable parameters henceforth.
 */